[{"/home/darkquilius/weather-challenge/src/index.js":"1","/home/darkquilius/weather-challenge/src/App.js":"2","/home/darkquilius/weather-challenge/src/Display.js":"3","/home/darkquilius/loadup-challenge/client/src/index.js":"4","/home/darkquilius/loadup-challenge/client/src/App.js":"5","/home/darkquilius/loadup-challenge/client/src/Display.js":"6","/home/darkquilius/loadup-challenge/client/src/ThreeDay.js":"7"},{"size":197,"mtime":1609287112515,"results":"8","hashOfConfig":"9"},{"size":1812,"mtime":1609286886562,"results":"10","hashOfConfig":"9"},{"size":1106,"mtime":1609286932118,"results":"11","hashOfConfig":"9"},{"size":197,"mtime":1609287364738,"results":"12","hashOfConfig":"13"},{"size":2789,"mtime":1609781216858,"results":"14","hashOfConfig":"13"},{"size":1594,"mtime":1609781135462,"results":"15","hashOfConfig":"13"},{"size":707,"mtime":1609781010123,"results":"16","hashOfConfig":"13"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1vhn1gm",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"thfqcc",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},"/home/darkquilius/weather-challenge/src/index.js",[],["37","38"],"/home/darkquilius/weather-challenge/src/App.js",["39"],"import React, {useState, useEffect} from \"react\";\nimport Display from \"./Display\";\nimport axios from 'axios';\nimport styled from 'styled-components';\n\n// function scrollBackground(){\n//   var x = 0;\n//   setInterval(function(){\n//       x-=1;\n//       Wrapper.componentStyle.rules[0].replace(\" background-position: 0 0;\", ` background-position: ${x}px 0;`);\n//       console.log(Wrapper.componentStyle.rules[0])\n//   }, 5000);\n// }\n\nfunction App() {\n\n  const [weather, setWeather] = useState({})\n\n  async function showWeather(position) {\n    const latitude  = position.coords.latitude;\n    const longitude = position.coords.longitude;\n  \n    let weatherInfo = await axios(`https://api.openweathermap.org/data/2.5/onecall?units=imperial&lat=${latitude}&lon=${longitude}&appid=${process.env.REACT_APP_API_KEY}`)\n    .catch(err => console.log(err))\n  \n   setWeather(weatherInfo.data)\n   let clearWeather = setInterval(() => {\n     let stop = 0\n    setWeather({})\n    stop++\n    if(stop === 1){\n      clearInterval(clearWeather)\n    }\n  }, 15000);\n  }\n\n  // useEffect(scrollBackground)\n\n  return (\n    <Wrapper>\n    <div className=\"container\">\n      <Display weather={weather}/>\n      <button \n        onClick={() => navigator.geolocation.getCurrentPosition(showWeather)}\n        className=\"btn\"\n        >\n          Current Weather\n        \n        </button>\n    </div>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.section`\n  min-height: 100vh;\n  display: grid;\n  place-items: center;\n  background-image: url(\"https://images.pexels.com/photos/125457/pexels-photo-125457.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\");\\\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  \n  .container {\n    width: 90vw;\n    max-width: 600px;\n    text-align: center;\n  }\n`;\n\nexport default App;\n","/home/darkquilius/weather-challenge/src/Display.js",[],"/home/darkquilius/loadup-challenge/client/src/index.js",[],["40","41"],"/home/darkquilius/loadup-challenge/client/src/App.js",[],"/home/darkquilius/loadup-challenge/client/src/Display.js",["42","43"],"import React from \"react\";\nimport styled from 'styled-components';\nimport moment from \"moment\";\nimport ThreeDay from \"./ThreeDay\";\n\nconst Display = ({weather, showCurrent, showThreeDay}) => {\n\n    if(weather.current && showCurrent){\n    return(\n        <Wrapper>\n            <h1>Current Weather</h1>\n            <h1>{moment().format(\"MMM \" + \"D \" + \"YYYY\")}</h1>\n            <img alt=\"Current Weather\" src={`http://openweathermap.org/img/wn/${weather.current.weather[0].icon}@4x.png`} />\n            <h3 className=\"description\">{weather.current.weather[0].description.toUpperCase()}</h3>\n            <h3>{weather.current.temp.toString().substring(0,2)}&#176;F</h3>\n            <p>Humidity: {weather.current.humidity}%</p>\n            <p>Windspeed: {weather.current.wind_speed} MPH</p>\n            <p>UV Index: {weather.current.uvi}</p>\n        </Wrapper>\n    )\n    }\n    else if(weather.daily && showThreeDay){\n        let threeDay = weather.daily.slice(1, 4);\n        let index = 0;\n        return(\n        <Wrapper className=\"threeDay\">\n            <h1>Three Day Forecast</h1>\n            {threeDay.map((daily) => {\n                index++\n                return <ThreeDay key={`day ${index}`} {...daily} index={index}></ThreeDay>\n            })}\n        </Wrapper>\n        )\n    }\n    else{\n        return(\n        <Wrapper>\n            <h1 className=\"head\">Get The Weather Near You Fast!!</h1>\n        </Wrapper>\n        )\n    }\n\n}\n\nconst Wrapper = styled.div`\n.threeDay {\n    display: grid;\n}\n\nh1 {\n    color: white;\n}\n\n.description {\n    color: lightsteelblue\n}\n`;\n\nexport default Display","/home/darkquilius/loadup-challenge/client/src/ThreeDay.js",["44","45"],"import React from 'react';\nimport styled from 'styled-components';\nimport moment from \"moment\";\n\nconst ThreeDay = ({weather, temp, humidity, wind_speed, index}) => {\n\n  let date = moment().add(index, \"days\").format(\"MMM \" + \"D, \" + \"YYYY\")\n\n  return (\n    <Wrapper>\n        <h1>{date}</h1>\n        <img alt=\"Current Weather\" src={`http://openweathermap.org/img/wn/${weather[0].icon}@4x.png`} />\n        <h3 className=\"description\">{weather[0].description.toUpperCase()}</h3>\n        <p>{temp.day.toString().substring(0,2)}&#176;F</p>\n        <p>{humidity}%</p>\n        <p>Windspeed: {wind_speed} MPH</p>\n      </Wrapper>\n  )\n};\n\nconst Wrapper = styled.div`\ndisplay: inline-grid;\n`;\n\nexport default ThreeDay;",["46","47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":26,"nodeType":"54","messageId":"55","endLine":1,"endColumn":35},{"ruleId":"48","replacedBy":"56"},{"ruleId":"50","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":12,"column":41,"nodeType":"60","messageId":"61","endLine":12,"endColumn":42},{"ruleId":"58","severity":1,"message":"59","line":12,"column":48,"nodeType":"60","messageId":"61","endLine":12,"endColumn":49},{"ruleId":"58","severity":1,"message":"59","line":7,"column":56,"nodeType":"60","messageId":"61","endLine":7,"endColumn":57},{"ruleId":"58","severity":1,"message":"59","line":7,"column":64,"nodeType":"60","messageId":"61","endLine":7,"endColumn":65},{"ruleId":"48","replacedBy":"62"},{"ruleId":"50","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["64"],["65"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["64"],["65"],"no-global-assign","no-unsafe-negation"]